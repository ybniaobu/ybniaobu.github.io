<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《Learning Python》读书笔记（一）</title>
      <link href="/2022/09/17/Learning_python1/"/>
      <url>/2022/09/17/Learning_python1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该笔记为 <strong>《Learning Python》</strong> 的读书笔记，未经过系统的整理；<br>该书涉及的内容可能过于啰嗦，但包含一些python背后的逻辑和机制，值得初学者观看；<br>学习完成日期为XXXX年XX月XX日。</p></blockquote><p><img src="https://s2.loli.net/2022/09/17/ri9Ue6nguJdq1Ca.jpg" alt="learning_python.jpg"></p><h1 id="PART-I-Getting-Started"><a href="#PART-I-Getting-Started" class="headerlink" title="PART I Getting Started"></a>PART I Getting Started</h1><h2 id="Chapter-2-How-Python-Runs-Programs"><a href="#Chapter-2-How-Python-Runs-Programs" class="headerlink" title="Chapter 2 How Python Runs Programs"></a>Chapter 2 How Python Runs Programs</h2><h3 id="一、Python-Interpreter-解释器"><a href="#一、Python-Interpreter-解释器" class="headerlink" title="一、Python Interpreter 解释器"></a>一、Python Interpreter 解释器</h3><ul><li>Python即是计算机语言，又是叫解释器的安装包</li><li>Python语言代码 → python解释器 → 执行</li><li>the interpreter is a layer of software logic between your code and the computer hardware on your machine.</li></ul><h3 id="二、Byte-code-compilation-字节码编译"><a href="#二、Byte-code-compilation-字节码编译" class="headerlink" title="二、Byte code compilation 字节码编译"></a>二、Byte code compilation 字节码编译</h3><ol><li>python interpreter将source code（源代码）编译成byte code（字节码），再转发到 → virtual machine（虚拟机）；</li><li>byte code<ul><li>字节码比源代码运行速度快；</li><li>python会将程序的字节码保持在.pyc的拓展名文件，并存储在__pycache__的子目录中（在源文件同一路径）；</li><li>若上次保存的字节码之后没修改过源代码，则直接加载.pyc文件；</li><li>字节码不是机器的2进制代码，是特定于python的一种表达形式。这也是python比c慢的原因，字节码比cpu指令需要更多的工作。</li></ul></li><li>python virtual machine(PVM)<ul><li>字节码发送至虚拟机的程序上执行，虚拟机是runtime engine of Python，是python系统的一部分。</li></ul></li></ol><h3 id="三、Python编译器的变种或者实现方式（implementation）"><a href="#三、Python编译器的变种或者实现方式（implementation）" class="headerlink" title="三、Python编译器的变种或者实现方式（implementation）"></a>三、Python编译器的变种或者实现方式（implementation）</h3><ul><li>5个主要的变体：CPython, Jython, IronPython, Stackless, and PyPy。</li></ul><ol><li><p>CPython</p><ul><li>The original, and standard, implementation of Python is usually called CPython；</li><li>cpython就是大部分人使用的；</li><li>Cpython允许python脚本化C和C++。</li></ul></li><li><p>Jython: Python for Java</p><ul><li>Jython包含Java类，这些类将python源代码编译成Java字节码，在到Java虚拟机(JVM)；</li><li>Jython让Python代码能够脚本化Java应用程序，python代码被翻译成Java字节码，运行起来像Java程序。</li></ul></li><li><p>IronPython: Python for .NET</p><ul><li>让python程序与windows的.NET框架以及linux的开源的Mono编写的应用相集成（integrate with）；</li><li>IronPython allows Python programs to act as both client and server components, gain accessibility both to and from other .NET languages。</li></ul></li><li><p>Stackless: Python for concurrency（并发性）</p><ul><li>Because it does not save state on the C language call stack, Stackless Python can make Python easier to port to small；</li><li>stack architectures, provides efficient multiprocessing options, and fosters novel programming structures such as coroutines；</li><li>上面的翻译：因为它不会在C语言调用栈上保存状态，让它更易移植到较小的栈架构中，提供了高效的多处理选项，并且促进了协程(coroutine)的编程结构的出现。</li></ul></li><li><p>PyPy: Python for speed</p><ul><li>PyPy是Cpython的另一种实现，It provides a fast Python implementation with a JIT (just-in-time) compiler；</li><li>JIT：字节码转换和程序运行同时进行；</li><li>PyPy is the successor（继任者） to the original Psyco JIT；</li><li>PyPy currently claims a 5.7X speedup over CPython，让某些情况下跟C一样快，有时超越C。</li></ul></li></ol><h2 id="Chapter-3-How-You-Run-Programs"><a href="#Chapter-3-How-You-Run-Programs" class="headerlink" title="Chapter 3 How You Run Programs"></a>Chapter 3 How You Run Programs</h2><h3 id="一、Interactive-command-line交互式命令行；interactive-prompt交互式提示"><a href="#一、Interactive-command-line交互式命令行；interactive-prompt交互式提示" class="headerlink" title="一、Interactive command line交互式命令行；interactive prompt交互式提示"></a>一、Interactive command line交互式命令行；interactive prompt交互式提示</h3><ol><li>就是Windows上的DOS console window（DOS控制台窗口）—a program named cmd.exe and usually known as Command Prompt(命令提示符)；</li><li>DOS：Disk Operating System磁盘操作系统(一种面向磁盘的系统软件)，DOS就是人给机器下达命令的集合，是存储在操作系统中的命令集。</li></ol><h3 id="二、The-System-Path系统路径"><a href="#二、The-System-Path系统路径" class="headerlink" title="二、The System Path系统路径"></a>二、The System Path系统路径</h3><ol><li>if you have not set your system’s PATH environment variable to include Python’s install directory, you may need to replace；</li><li>the word “python” with the full path to the Python executable on your machine；</li><li>比如c:\Users&gt; c:\python33\python而不是C:\Users\&gt; python</li></ol><h3 id="三、Running-Code-Interactively交互式地运行代码"><a href="#三、Running-Code-Interactively交互式地运行代码" class="headerlink" title="三、Running Code Interactively交互式地运行代码"></a>三、Running Code Interactively交互式地运行代码</h3><ol><li>When working interactively, the results of your code are displayed below the &gt;&gt;&gt; input lines after you press the Enter key.</li></ol><h3 id="四、程序program、模块module、脚本script的区别"><a href="#四、程序program、模块module、脚本script的区别" class="headerlink" title="四、程序program、模块module、脚本script的区别"></a>四、程序program、模块module、脚本script的区别</h3><ol><li>Terminology in this domain can vary somewhat；</li><li>module files are often referred to as programs in Python—a program is considered to be a series of precoded statements stored in a file for repeated execution；</li><li>Module files that are run directly are also sometimes called scripts—an informal term usually meaning a top-level顶层 program file；</li><li>Some reserve the term “module” for a file imported from another file, and “script” for the main file of a program; we generally will here, too.</li></ol><h3 id="五、IDLE-GUI-Integrated-Development-and-Learning-Environment-Graphical-User-Interface-集成开发和学习环境的图形用户界面"><a href="#五、IDLE-GUI-Integrated-Development-and-Learning-Environment-Graphical-User-Interface-集成开发和学习环境的图形用户界面" class="headerlink" title="五、IDLE GUI (Integrated Development and Learning Environment; Graphical User Interface)集成开发和学习环境的图形用户界面"></a>五、IDLE GUI (Integrated Development and Learning Environment; Graphical User Interface)集成开发和学习环境的图形用户界面</h3><ol><li>shell （计算机壳层）指为使用者提供操作界面的软件，类似于DOS下的COMMAND.COM和后来的cmd.exe；</li><li>基本上shell分两大类： GUI shell（图形界面shell）和Command Line Interface shell（命令行式shell）；</li><li>在命令行shell中python draft.py &gt; saveit.txt 可以让输出行都存储在该txt文件中，这叫流重定向 stream redirection。</li></ol><h3 id="六、Module的属性（Attributes）"><a href="#六、Module的属性（Attributes）" class="headerlink" title="六、Module的属性（Attributes）"></a>六、Module的属性（Attributes）</h3><ol><li>a module is mostly just a package of variable names, known as a namespace, and the names within that package are called attributes；</li><li>模块是变量名的包，即命名空间，在包内的变量名称为属性；</li><li>An attribute is simply a variable name that is attached to a specific object (like a module).</li></ol><h1 id="PART-II-Types-and-Operations"><a href="#PART-II-Types-and-Operations" class="headerlink" title="PART II Types and Operations"></a>PART II Types and Operations</h1><h2 id="chapter-4-Introducing-Python-Object-Types"><a href="#chapter-4-Introducing-Python-Object-Types" class="headerlink" title="chapter 4 Introducing Python Object Types"></a>chapter 4 Introducing Python Object Types</h2><h3 id="一、Python-object-types"><a href="#一、Python-object-types" class="headerlink" title="一、Python object types"></a>一、Python object types</h3><ol><li>OOP Object Oriented Programming 面向对象编程</li><li>Python’s Core Data Types或built-in object types（内置对象类型）<ul><li>数字Numbers；字符串Strings；列表Lists；字典Dictionaries；元组Tuples；文件Files；集合Sets；</li><li>Other core types：布尔型Booleans；类型types  Program unit types：函数Functions；模块modules；类classes；</li><li>Implementation-related types：已编译代码Compiled code, 调用栈跟踪stack tracebacks；</li><li>列表是对象的有序集合，字典通过键key存储对象。</li></ul></li><li>作用于多种类型的通用操作都是以内置函数或表达式的形式出现的（如len(X)、X[0])；类型特定的操作是以方法调用的形式出现的（如string.upper())</li></ol><h3 id="二、numbers-and-strings"><a href="#二、numbers-and-strings" class="headerlink" title="二、numbers and strings"></a>二、numbers and strings</h3><ol><li><p>数字Numbers</p><ul><li>数字没有长度，要先转变为字符串再用len函数： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(<span class="number">12345</span>)))</span><br></pre></td></tr></table></figure></li><li>math module和random module:     <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.pi)</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">85</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串Strings</p><ul><li>严格来说字符串是由单字符的字符串所组成的序列sequence；</li><li>（1）序列操作：字符串支持位置顺序的操作，可通过索引indexing操作 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = <span class="string">&#x27;Spam&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(S))</span><br><span class="line"><span class="built_in">print</span>(S[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(S[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(S[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(S[<span class="built_in">len</span>(S)-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(S[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 这个叫分片（slice）X[I:J]，注意不包括J。</span></span><br><span class="line"><span class="built_in">print</span>(S[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(S[:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(S[:])</span><br></pre></td></tr></table></figure></li><li>（2）拼接concatenation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(S + <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(S * <span class="number">8</span>)</span><br></pre></td></tr></table></figure></li><li>加号既可以用作数字加号，也可以字符串拼接，这就是一种多态性polymorphism：the meaning of an operation depends on the objects being operated on；</li><li>（3）不可变性Immutability</li><li>you can’t change a string by assigning to one of its positions, but you can always build a new one and assign it to the same name；</li><li>不能通过对位置进行赋值（assign）而改变字符串，但是可以对整个变量赋值；</li><li>比如不能 S[0] &#x3D; ‘z’ <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = <span class="string">&#x27;z&#x27;</span> + S[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(S)</span><br></pre></td></tr></table></figure></li><li>（4）数字、字符串和元组是不可变的，列表、集合、字典是可以变的；</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python入门.读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blender快捷键整理（持续更新中）</title>
      <link href="/2022/09/14/blender_%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/09/14/blender_%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>快捷键要英文输入法！！！！！！</li><li>有些快捷键要选中物体。</li></ul><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h3 id="移动物体"><a href="#移动物体" class="headerlink" title="移动物体"></a>移动物体</h3><ul><li>Grab抓取状态：<kbd>G</kbd><ul><li>再按<kbd>X</kbd>，锁定按x轴移动</li><li>再按<kbd>Y</kbd>，锁定按y轴移动</li><li>再按<kbd>Z</kbd>，锁定按z轴移动</li></ul></li><li>重置移动：<kbd>alt</kbd>+<kbd>G</kbd></li><li>重置缩放、旋转：<kbd>alt</kbd>+<kbd>S or R</kbd></li></ul><h3 id="改变视角"><a href="#改变视角" class="headerlink" title="改变视角"></a>改变视角</h3><ul><li>旋转视角：<kbd>鼠标中键</kbd></li><li>缩放视角：<kbd>鼠标滚轮</kbd> 或者 <kbd>ctrl</kbd>+<kbd>鼠标中键</kbd></li><li>平移视角：<kbd>shift+鼠标中键</kbd></li><li>快速聚焦：小数字键盘上的<kbd>·</kbd>，或者按住<kbd>~</kbd>选择View Selected</li></ul><h3 id="视图快捷键"><a href="#视图快捷键" class="headerlink" title="视图快捷键"></a>视图快捷键</h3><ul><li>正交前视图：小数字键盘<kbd>1</kbd></li><li>正交右视图：小数字键盘<kbd>3</kbd></li><li>正交顶视图：小数字键盘<kbd>7</kbd></li><li>以上直接使用右上角xyz的那个坐标轴比较方便</li><li>透视和正交的切换：小数字键盘<kbd>5</kbd></li><li>四格视图：<kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>Q</kbd></li></ul><h3 id="添加物体"><a href="#添加物体" class="headerlink" title="添加物体"></a>添加物体</h3><ul><li>调回添加物体设置菜单（微调面板）：<kbd>F9</kbd></li><li>侧边栏sidebar（n面板）：<kbd>N</kbd></li><li>应用物体变化：<kbd>ctrl</kbd>+<kbd>A</kbd></li><li>编辑模式：<kbd>Tab</kbd></li><li>复制：<kbd>shift</kbd>+<kbd>D</kbd></li></ul><h3 id="摄像机相关"><a href="#摄像机相关" class="headerlink" title="摄像机相关"></a>摄像机相关</h3><ul><li>摄像机镜头对齐到当前屏幕视角：<kbd>ctrl</kbd>+<kbd>alt</kbd>+小数字键盘的<kbd>0</kbd>，或者N面板上的view，选择Camera to View</li></ul><h1 id="修改器相关操作"><a href="#修改器相关操作" class="headerlink" title="修改器相关操作"></a>修改器相关操作</h1><h3 id="表面细分修改器-Subdivision-Surface-Modifier"><a href="#表面细分修改器-Subdivision-Surface-Modifier" class="headerlink" title="表面细分修改器 Subdivision Surface Modifier"></a>表面细分修改器 Subdivision Surface Modifier</h3><ul><li>添加表面细分修改器：<kbd>ctrl</kbd>+<kbd>1</kbd></li></ul><h1 id="动画相关操作"><a href="#动画相关操作" class="headerlink" title="动画相关操作"></a>动画相关操作</h1><h3 id="关键帧"><a href="#关键帧" class="headerlink" title="关键帧"></a>关键帧</h3><ul><li>插入关键帧：<kbd>I</kbd></li></ul>]]></content>
      
      
      <categories>
          
          <category> blender </category>
          
          <category> blender教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blender </tag>
            
            <tag> 3d建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python编程从入门到实践》读书笔记（二）</title>
      <link href="/2022/09/12/Python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/09/12/Python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该笔记为 <strong>《Python编程从入门到实践》</strong> 的读书笔记，未经过系统的整理；<br>该笔记涉及的内容较为基础，可能含有大量废话；<br>该书的内容不涉及对Python底层逻辑的理解，不利于巩固基础，建议看完后看 <strong>《Learning Python》</strong><br>学习完成日期为2021年12月13日。</p></blockquote><p><img src="https://s2.loli.net/2022/09/09/F45BwnLIjXxVCtT.png" alt="Python编程从入门到实践"></p><h1 id="第-8-章-函数"><a href="#第-8-章-函数" class="headerlink" title="第 8 章　函数"></a>第 8 章　函数</h1><h2 id="一、定义函数"><a href="#一、定义函数" class="headerlink" title="一、定义函数"></a>一、定义函数</h2><ol><li>定义简单函数 <code>def functionname()：</code> 。</li><li>文档字符串(docstrings) 文档字符串用三引号，注释和文档字符串的区别主要在于文档字符串是可以调用的，而注释不行。</li><li>向函数传递信息 <code>def functionname(parameters):</code> 。</li><li>形参：parameter 实参：argument。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、定义简单函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(): <span class="comment"># 括号必不可少！！别忘了冒号！！</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span> <span class="comment"># 这个就是文档字符串，3个单引号或双引号，也要缩进4格</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">greet_user() <span class="comment"># 函数的调用，也别忘了这个括号！</span></span><br><span class="line"><span class="built_in">print</span>(greet_user.__doc__) <span class="comment"># 文档字符串(docstrings)的调用</span></span><br><span class="line"><span class="comment"># 2、向函数传递信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>): <span class="comment"># 这里添加username ，就可让函数接受你给username指定的任何值</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;username.title()&#125;</span>!&quot;</span>)</span><br><span class="line">greet_user(<span class="string">&#x27;jesse&#x27;</span>) <span class="comment"># 调用函数时，可将一个名字传递给它</span></span><br><span class="line"><span class="comment"># 3、在上面案例的函数greet_user()的定义中，变量username是一个形参</span></span><br><span class="line"><span class="comment"># 在代码greet_user(&#x27;jesse&#x27;)中，值&#x27;jesse&#x27;是一个实参 。实参是调用函数时传递给函数的信息。</span></span><br><span class="line"><span class="comment"># 我们调用函数时，将要让函数使用的信息放在括号内。在greet_user(&#x27;jesse&#x27;)中，将实参&#x27;jesse&#x27;传递给了函数greet_user()，这个值被存储在形参username中。</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Hello!</span><br><span class="line">显示简单的问候语</span><br><span class="line"># 2.</span><br><span class="line">Hello, Jesse!</span><br></pre></td></tr></table></figure><h2 id="二、传递实参"><a href="#二、传递实参" class="headerlink" title="二、传递实参"></a>二、传递实参</h2><ol><li>位置实参positional arguments 每个实参都关联到函数定义中的一个形参，最简单的关联方式是基于实参的顺序，即位置实参。</li><li>关键字实参keyword arguments 指传递给函数的名称值对，关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</li><li>默认值 可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、位置实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"><span class="comment"># 2、关键字实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line"><span class="comment"># 3、默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):  <span class="comment"># ★注意：使用默认值时，必须先没有默认值的形参，再有默认值的形参。</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line"><span class="comment"># 4、等效的函数调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;harry&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"># 2.</span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"></span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"># 3.</span><br><span class="line">I have a dog.</span><br><span class="line">My dog&#x27;s name is Willie.</span><br><span class="line"></span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"># 4.</span><br><span class="line">I have a dog.</span><br><span class="line">My dog&#x27;s name is Willie.</span><br><span class="line"></span><br><span class="line">I have a dog.</span><br><span class="line">My dog&#x27;s name is Willie.</span><br><span class="line"></span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"></span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br><span class="line"></span><br><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br></pre></td></tr></table></figure><h2 id="三、定义的函数的返回值"><a href="#三、定义的函数的返回值" class="headerlink" title="三、定义的函数的返回值"></a>三、定义的函数的返回值</h2><ul><li><code>return</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"><span class="comment"># 2、让实参变成可选的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;middle_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"><span class="comment"># 3、返回字典</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age = <span class="literal">None</span></span>):  <span class="comment"># 这里age = None也可以是上面的 age = &quot;&quot;，也可以是age = False</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Jimi Hendrix</span><br><span class="line"># 2.</span><br><span class="line">Jimi Hendrix</span><br><span class="line">John Lee Hooker</span><br><span class="line">&#123;&#x27;first&#x27;: &#x27;jimi&#x27;, &#x27;last&#x27;: &#x27;hendrix&#x27;, &#x27;age&#x27;: 27&#125;</span><br></pre></td></tr></table></figure><h2 id="四、向函数传递列表"><a href="#四、向函数传递列表" class="headerlink" title="四、向函数传递列表"></a>四、向函数传递列表</h2><ol><li>给函数传递列表，向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象（如字典）。</li><li>在函数中修改列表，在函数中对这个列表所做的任何修改都是永久性的，这让你能够高效地处理大量的数据。</li><li>切片表示法[:] <code>function_name(list_name[:])</code> 创建列表的副本，向函数传递列表的副本而不是原件。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、传递列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">f&quot;Hello, <span class="subst">&#123;name.title()&#125;</span>!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br><span class="line"><span class="comment"># 2、修改列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):  <span class="comment"># 这个函数跟7-3第一个知识点是一样的</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Printing model: <span class="subst">&#123;current_design&#125;</span>&quot;</span>)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br><span class="line"><span class="comment"># 3、切片表示法创建列表的副本</span></span><br><span class="line">print_models(unprinted_designs[:], completed_models) <span class="comment"># 像下面这样调用print_models(), 但它使用的是列表unprinted_designs 的副本，而不是列表unprinted_designs本身。</span></span><br><span class="line"><span class="comment"># 说明：虽然向函数传递列表的副本可保留原始列表的内容，但除非有充分的理由需要传递副本，否则还是应该将原始列表传递给函数。</span></span><br><span class="line"><span class="comment"># 因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Ty!</span><br><span class="line">Hello, Margot!</span><br><span class="line"># 2.</span><br><span class="line">Printing model: dodecahedron</span><br><span class="line">Printing model: robot pendant</span><br><span class="line">Printing model: iphone case</span><br><span class="line"></span><br><span class="line">The following models have been printed:</span><br><span class="line">dodecahedron</span><br><span class="line">robot pendant</span><br><span class="line">iphone case</span><br></pre></td></tr></table></figure><h2 id="五、传递任意数量实参"><a href="#五、传递任意数量实参" class="headerlink" title="五、传递任意数量实参"></a>五、传递任意数量实参</h2><ol><li>形参名<code>*parameter</code>中的星号让python创建一个名为parameter的☆空元组tuple，并将收到的所有值都封装到这个元组里（即便函数只收到了一个值）。</li><li>通用形参名*args (arguments的缩写)，收集任意数量的位置实参。</li><li>形参<code>**parameter</code>中的两个星号让Python创建一个名为parameter的空字典dict，并将收到的所有名称值对都封装到这个字典中。</li><li>通用形参名**kwargs (keyword arguments的缩写)，收集任意数量的关键字实参。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、任意数量实参*parameter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(toppings)</span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment"># 2、结合使用位置实参和任意数量实参</span></span><br><span class="line"><span class="comment"># ★说明：如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nMaking a <span class="subst">&#123;<span class="built_in">str</span>(size)&#125;</span>-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment"># 3、使用任意数量的关键字实参</span></span><br><span class="line"><span class="comment"># 说明：可将函数编写成能够接受任意数量的键值对</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>):</span><br><span class="line">    user_info[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    user_info[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">return</span> user_info</span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>, location = <span class="string">&#x27;princeton&#x27;</span>, field = <span class="string">&#x27;physics&#x27;</span>) <span class="comment"># 注意location和field上面不要引号，用赋值给函数键值对</span></span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br><span class="line"><span class="comment"># 打印出来顺序是这样的&#123;&#x27;location&#x27;: &#x27;princeton&#x27;, &#x27;field&#x27;: &#x27;physics&#x27;, &#x27;first_name&#x27;: &#x27;albert&#x27;, &#x27;last_name&#x27;: &#x27;einstein&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 我的理解是自定义函数先接收了2个参数，2个键值对，先把键值对放入了字典，然后下面2个语句将参数变成了键值对，最后返回字典</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">(&#x27;pepperoni&#x27;,)</span><br><span class="line">(&#x27;mushrooms&#x27;, &#x27;green peppers&#x27;, &#x27;extra cheese&#x27;)</span><br><span class="line"># 2.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br><span class="line"># 3.</span><br><span class="line">&#123;&#x27;location&#x27;: &#x27;princeton&#x27;, &#x27;field&#x27;: &#x27;physics&#x27;, &#x27;first_name&#x27;: &#x27;albert&#x27;, &#x27;last_name&#x27;: &#x27;einstein&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="六、把函数储存在模块里"><a href="#六、把函数储存在模块里" class="headerlink" title="六、把函数储存在模块里"></a>六、把函数储存在模块里</h2><ol><li>import语句 将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码。</li><li><code>module_name.function_name()</code> 用这种import语句导入了名为module_name.py的整个模块，就可使用该语法来使用其中任何一个函数。</li><li><code>from module_name import function_name</code> 导入模块中的特定函数 注意：导入没有小括号，使用才要小括号。</li><li><code>from module_name import function_0, function_1, function_2</code> 通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数。</li><li><code>from module_name import function_name as fn</code> 用as将函数重命名。</li><li><code>import module_name as mn</code> 用as给模块重命名。</li><li><code>from module_name import *</code> 使用星号（*）运算符让Python导入模块中的所有函数。</li></ol><p>以下为pizza.py模块内的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pizza.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nMaking a <span class="subst">&#123;<span class="built_in">str</span>(size)&#125;</span>-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;topping&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>以下为示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment"># 2、导入特定的函数</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment"># 与上面的区别就是不用在函数之前写module_name.了</span></span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br><span class="line"><span class="comment"># ★ 若使用这种语法，调用函数时就无需使用句点。由于我们在import语句中显式地导入了函数make_pizza()，因此调用它时只需指定其名称。</span></span><br><span class="line"><span class="comment"># 理解：因为1里面导入的是模块，所以要模块.函数()，但2直接导入了函数，所以直接使用函数，下面的3、4可以证明这点</span></span><br><span class="line"><span class="comment"># 3、使用as给函数指定别名</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line">mp(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">mp(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment"># 4、使用as给模块指定别名</span></span><br><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br><span class="line">p.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">p.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment"># 5、导入模块中的所有函数</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> * <span class="comment"># import 语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。</span></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br><span class="line"># 2.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br><span class="line"># 3.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br><span class="line"># 4.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br><span class="line"># 5.</span><br><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><h1 id="第-9-章-类"><a href="#第-9-章-类" class="headerlink" title="第 9 章　类"></a>第 9 章　类</h1><h2 id="一、创建和使用类"><a href="#一、创建和使用类" class="headerlink" title="一、创建和使用类"></a>一、创建和使用类</h2><ol><li>面向对象编程是最有效的软件编写方法之一。基于类创建对象时，每个对象都具备通用行为，然后可根据需要赋予每个对象独特的个性。<ul><li>根据类来创建对象被称为<strong>实例化</strong>，这让你能够使用类的实例。</li><li>在本章中，你将编写一些类并创建其实例。你将指定可在实例中存储什么信息，定义可对这些实例执行哪些操作。</li><li>你还将编写一些类来扩展既有类的功能，让相似的类能够高效地共享代码。你将把自己编写的类存储在模块中，并在自己的程序文件中导入其他程序员编写的类。</li></ul></li><li>创建类 <code>class ClassName</code>: 注意：类的名称首字母要大写。</li><li>构造方法<code>__init__()</code> 该方法在类实例化时会自动调用。</li><li>根据类创建实例instance 类是一系列说明，让Python知道如何创建表示特定类的实例。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建和使用类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="comment"># 注意大写和冒号</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>): <span class="comment"># self可以理解为传递实例给类</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>方法__init__() 称为构造方法<ul><li>类中的函数称为方法，方法__init__() 是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。开头和末尾各有两个下划线。</li><li>我们将方法__init__()定义成了包含三个形参：self 、name 和age 。在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。</li><li>python调用这个__init__()方法来创建Dog实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</li><li>我们创建Dog实例时，Python将调用Dog类的方法__init__()。我们将通过实参向Dog()传递名字和年龄；self会自动传递，因此我们不需要传递它。</li><li><code>self.name = name</code> 以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量。</li><li><code>self.name = name</code> 获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例。</li><li>像这样可通过实例访问的变量称为属性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据类创建实例</span></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>) </span><br><span class="line"><span class="comment"># Python使用实参&#x27;willie&#x27;和6调用Dog类中的方法__init__()。方法__init__()创建一个表示特定小狗的示例，并使用我们提供的值来设置属性name和age。</span></span><br><span class="line"><span class="comment"># 方法__init__()并未显式地包含return语句，但Python自动返回一个表示这条小狗的实例。我们将这个实例存储在变量my_dog中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog&#x27;s name is <span class="subst">&#123;my_dog.name&#125;</span>.&quot;</span>) </span><br><span class="line"><span class="comment"># my_dog.name访问实例的属性，Python先找到实例my_dog，再查找与这个实例相关联的属性name。</span></span><br><span class="line"><span class="comment"># 在Dog类中引用这个属性时，使用的是self.name</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog is <span class="subst">&#123;my_dog.age&#125;</span> years old.&quot;</span>)</span><br><span class="line">my_dog.sit() <span class="comment"># 调用方法 句点表示法来调用Dog类中定义的任何方法，别忘了括号</span></span><br><span class="line">my_dog.roll_over() <span class="comment"># 要调用方法，可指定实例的名称（这里是my_dog）和要调用的方法，并用句点分隔它们。</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">My dog&#x27;s name is willie.</span><br><span class="line">My dog is 6 years old.</span><br><span class="line">willie is now sitting.</span><br><span class="line">willie rolled over!</span><br></pre></td></tr></table></figure><ul><li>你可按需求根据一个类创建任意数量的实例，条件是将每个实例都存储在不同的变量中，或占用列表或字典的不同位置。</li></ul><h2 id="二、使用类和实例"><a href="#二、使用类和实例" class="headerlink" title="二、使用类和实例"></a>二、使用类和实例</h2><ol><li>给属性指定默认值，在方法<code>__init__()</code>内指定设置默认值，如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</li><li>以三种不同的方式修改属性的值：直接通过实例进行修改；通过方法进行设置；通过方法进行递增（增加特定的值）。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、给属性指定默认值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has <span class="subst">&#123;self.odometer_reading&#125;</span> miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2（1）、直接修改属性的值</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span> <span class="comment"># 通过实例直接访问它</span></span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2（2）、通过方法修改属性的值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>): <span class="comment"># 添加了方法，这个方法接受一个里程值，并将其存储到self.odometer_reading中</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数设置为指定的值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has <span class="subst">&#123;self.odometer_reading&#125;</span> miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_new_car.update_odometer(<span class="number">23</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2（3）通过方法对属性的值进行递增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has <span class="subst">&#123;self.odometer_reading&#125;</span> miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数设置为指定的值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_used_car = Car(<span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;outback&#x27;</span>, <span class="number">2013</span>)</span><br><span class="line">my_used_car.update_odometer(<span class="number">23_500</span>) <span class="comment"># _的作用见2-6</span></span><br><span class="line">my_used_car.read_odometer()</span><br><span class="line">my_used_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_used_car.read_odometer()</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br><span class="line"># 2.(1).</span><br><span class="line">This car has 23 miles on it.</span><br><span class="line"># 2.(2).</span><br><span class="line">This car has 23 miles on it.</span><br><span class="line"># 2.(3).</span><br><span class="line">This car has 23500 miles on it.</span><br><span class="line">This car has 23600 miles on it.</span><br></pre></td></tr></table></figure><h2 id="三、继承类"><a href="#三、继承类" class="headerlink" title="三、继承类"></a>三、继承类</h2><ol><li>一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类。</li><li>子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</li><li>用<code>super()</code>函数调用父类。父类也称为超类 （superclass），名称super因此而得名。</li><li>给子类添加任意数量的属性和方法。</li><li>重写父类的方法 在子类中定义一个与父类同名的方法，对其进行重写。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、super()函数调用父类 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): <span class="comment"># 定义子类时，必须在括号内指定父类的名称。</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)  <span class="comment"># 注意：★super函数后面的没有self</span></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>) <span class="comment"># 这行代码调用ElectricCar类中定义的方法__init__()，后者让Python调用父类Car中定义的方法__init__()。</span></span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、给子类定义属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): <span class="comment"># ★定义子类时，必须在括号内指定父类的名称。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery_size = <span class="number">75</span> <span class="comment"># 子类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>): <span class="comment"># 子类方法</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has a <span class="subst">&#123;self.battery_size&#125;</span>-kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、重写父类的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): <span class="comment"># 重写父类的方法</span></span><br><span class="line">        long_name = <span class="string">f&quot;model: <span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">2019 Tesla Model S</span><br><span class="line"># 2.</span><br><span class="line">2019 Tesla Model S</span><br><span class="line">This car has a 75-kWh battery.</span><br><span class="line"># 3.</span><br><span class="line">Model: 2019 Tesla Model S</span><br></pre></td></tr></table></figure><h2 id="四、将实例用作属性"><a href="#四、将实例用作属性" class="headerlink" title="四、将实例用作属性"></a>四、将实例用作属性</h2><ul><li>给类添加的细节越来越多：属性和方法清单以及文件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大型类拆分成多个协同工作的小类。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将实例用作属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">75</span></span>): <span class="comment"># 如果没有给它提供值，电瓶容量将被设置为75。</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has a <span class="subst">&#123;self.battery_size&#125;</span>-kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()  <span class="comment"># ★这里就是将实例用作属性，这行代码让Python创建一个新的Battery实例（默认值75），并将该实例存储在属性self.battery中</span></span><br><span class="line"><span class="comment"># 每当方法__init__()被调用时，都将执行该操作；因此现在每个ElectricCar实例都包含一个自动创建的Battery实例。</span></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery() <span class="comment"># ★这行代码让Python在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()。</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 75-kWh battery.</span><br></pre></td></tr></table></figure><h2 id="五、导入类"><a href="#五、导入类" class="headerlink" title="五、导入类"></a>五、导入类</h2><ol><li>导入一个类 <code>from module_name import Class_name</code> 。</li><li>导入多个类 <code>from module_name import Class_name0, Class_name1</code> 。</li><li>导入整个模块 <code>import module_name</code> 。</li><li>导入模块中的所有类 <code>from module_name import *</code> 。</li><li>在一个模块中导入另一个模块 注意：若只使用子模块，无需导入母模块。</li><li>使用别名 <code>from module_name import Class_name as CN</code> 创建实例时，可以使用这个别名：<code>instance = CN(&quot;arugment0&quot;, &quot;argument1&quot;)</code> 。</li></ol><p>以下是car.py的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># car.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;一个可用于表示汽车的类&quot;&quot;&quot;</span> <span class="comment"># 这是一个模块级文档字符串，对该模块的内容做了简要的描述。你应为自己创建的每个模块都编写文档字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性名称&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出汽车的里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has <span class="subst">&#123;self.odometer_reading&#125;</span> miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size = <span class="number">75</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car has a <span class="subst">&#123;self.battery_size&#125;</span>-kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶续航里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">75</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">260</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">100</span>:</span><br><span class="line">            <span class="built_in">range</span> = <span class="number">315</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;This car can go about <span class="subst">&#123;<span class="built_in">range</span>&#125;</span> miles on a full charge.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure><p>以下为本节示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、导入单个类</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br><span class="line"><span class="comment"># 2、在一个模块中存储多个类，并导入子类</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> ElectricCar</span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery()</span><br><span class="line">my_tesla.battery.get_range()</span><br><span class="line"><span class="comment"># 3、从一个模块中导入多个类</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car, ElectricCar</span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line"><span class="comment"># 4、导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> car</span><br><span class="line">my_beetle = car.Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2019</span>) <span class="comment"># 因为导入了整个模块，所以要使用句点表示法访问需要的类</span></span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line">my_tesla = car.ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line"><span class="comment"># 5、导入模块中的所有类</span></span><br><span class="line"><span class="comment"># 不推荐使用</span></span><br><span class="line"><span class="comment"># 6、在一个模块中导入另一个模块</span></span><br><span class="line"><span class="comment"># 可以将类存储在多个模块中时，一个模块中的类依赖于另一个模块中的类。在这种情况下，可在前一个模块中导入必要的类。</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> ElectricCar </span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">2019 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br><span class="line"># 2.</span><br><span class="line">2019 Tesla Model S</span><br><span class="line">This car has a 75-kWh battery.</span><br><span class="line">This car can go about 260 miles on a full charge.</span><br><span class="line"># 3.</span><br><span class="line">2019 Volkswagen Beetle</span><br><span class="line">2019 Tesla Roadster</span><br><span class="line"># 4.</span><br><span class="line">2019 Volkswagen Beetle</span><br><span class="line">2019 Tesla Roadster</span><br><span class="line"># 6.</span><br><span class="line">2019 Volkswagen Beetle</span><br><span class="line">2019 Tesla Roadster</span><br></pre></td></tr></table></figure><h2 id="六、Python标准库"><a href="#六、Python标准库" class="headerlink" title="六、Python标准库"></a>六、Python标准库</h2><ul><li>Python标准库是一组模块，安装的Python都包含它。可使用标准库中的任何函数和类，为此只需在程序开头包含一条简单的import语句。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、模块random的函数randint()。它将2个整数作为参数，并随机返回一个位于2个整数之间（含）的整数。</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="built_in">print</span>(randint(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 2、模块random的函数choice()。它将一个列表或元组作为参数，并随机返回一个元素。</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line">first_up = choice(players)</span><br><span class="line"><span class="built_in">print</span>(first_up)</span><br></pre></td></tr></table></figure><h2 id="七、类编码风格"><a href="#七、类编码风格" class="headerlink" title="七、类编码风格"></a>七、类编码风格</h2><ol><li>类名应采用驼峰命名法 ，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。</li><li>对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的功能，并遵循编写函数的文档字符串时采用的格式约定。</li><li>每个模块也都应包含一个文档字符串，对其中的类可用于做什么进行描述。</li><li>可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中，可使用两个空行来分隔类。</li><li>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import语句，再添加一个空行，然后编写导入你自己编写的模块的import语句。</li></ol><h1 id="第-10-章-文件和异常"><a href="#第-10-章-文件和异常" class="headerlink" title="第 10 章　文件和异常"></a>第 10 章　文件和异常</h1><h2 id="一、从文件读取数据（一）"><a href="#一、从文件读取数据（一）" class="headerlink" title="一、从文件读取数据（一）"></a>一、从文件读取数据（一）</h2><ol><li>用关键字with、函数open()、方法read()读取整个文件 <code>with open(&#39;file_name.txt&#39;) as file_object:</code> 。</li><li>打开不在程序文件所属目录中的文件 要让Python打开不与程序文件位于同一个目录中的文件，需要提供文件路径，它让Python到系统的特定位置去查找。</li><li>绝对文件路径、相对文件路径。</li></ol><p>以下为pi_digits.txt的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取整个文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>) <span class="keyword">as</span> file_object: <span class="comment"># 别忘了冒号，并注意是open函数里面是字符串！！</span></span><br><span class="line">    contents = file_object.read() <span class="comment"># 别忘了方法read()</span></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure><ul><li>函数<code>open()</code>接受一个参数：要打开的文件的名称。Python在当前执行的文件所在的目录中查找指定的文件。</li><li>函数<code>open()</code>返回一个表示文件的对象。在这里，<code>open(&#39;pi_digits.txt&#39;)</code> 返回一个表示文件pi_digits.txt的对象；Python将这个对象存储在我们将在后面使用的变量中。</li><li>关键字<code>with</code>在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了open()，但没有调用close()。<ul><li>你也可以调用open()和close()来打开和关闭文件，但这样做时，如果程序存在bug，导致close()语句未执行，文件将不会关闭。</li><li>这看似微不足道，但未妥善地关闭文件可能会导致数据丢失或受损。如果在程序中过早地调用close()，你会发现需要使用文件时它已关闭（无法访问），这会导致更多的错误。</li><li>并非在任何情况下都能轻松确定关闭文件的恰当时机，但通过使用前面所示的结构，可让Python去确定：你只管打开文件，并在需要时使用它，Python自会在合适的时候自动将其关闭。</li></ul></li><li>方法<code>read()</code> 读取这个文件的全部内容，并将其作为一个长长的字符串存储在变量contents中。</li></ul><h2 id="二、从文件读取数据（二）"><a href="#二、从文件读取数据（二）" class="headerlink" title="二、从文件读取数据（二）"></a>二、从文件读取数据（二）</h2><ol><li>逐行读取 使用for循环以每次一行的方式检查文件。</li><li>创建一个包含文件各行内容的列表 方法<code>readlines()</code>从文件中读取每一行，并将其存储在一个列表中 注意后面的s，别忘了加！！！！不加就读一行。</li><li>Python将所有文本都解读为字符串。如果读的是数，需要使用函数<code>int()</code>或函数<code>float()</code>。</li><li>打印到小数点后20位 用字符串切片 <code>str[:52]</code>。</li><li>检查某个字符串是否包含在文件里 用<code>if str_0 in str_1:</code> (str_1由读取文件而来，比如3中的pi_string）。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、逐行读取</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span> <span class="comment"># 别忘了是字符串</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object: <span class="comment"># 注意line只是变量名称，可以为任意变量名称</span></span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment"># 打印结果多了空白行，在这个文件中，每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，另一个来自print语句。</span></span><br><span class="line"><span class="built_in">print</span>(file_object)</span><br><span class="line"><span class="comment"># 2、方法readlines()</span></span><br><span class="line"><span class="comment"># 使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br><span class="line"><span class="built_in">print</span>(lines)</span><br><span class="line"><span class="comment"># 3、使用文件的内容</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br><span class="line"><span class="comment"># 因为每行左边都有空格，可使用strip()</span></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br><span class="line"><span class="comment"># 4、打印到小数点后20位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pi_string[:<span class="number">20</span>]&#125;</span>...&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">3.1415926535</span><br><span class="line"></span><br><span class="line">  8979323846</span><br><span class="line"></span><br><span class="line">  2643383279</span><br><span class="line">&lt;_io.TextIOWrapper name=&#x27;pi_digits.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;cp936&#x27;&gt;</span><br><span class="line"># 2.</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br><span class="line">[&#x27;3.1415926535\n&#x27;, &#x27;  8979323846\n&#x27;, &#x27;  2643383279&#x27;]</span><br><span class="line"># 3.</span><br><span class="line">3.1415926535  8979323846  2643383279</span><br><span class="line">36</span><br><span class="line">3.141592653589793238462643383279</span><br><span class="line">32</span><br><span class="line"># 4.</span><br><span class="line">3.141592653589793238...</span><br></pre></td></tr></table></figure><h2 id="三、写入文件"><a href="#三、写入文件" class="headerlink" title="三、写入文件"></a>三、写入文件</h2><ol><li>方法<code>write()</code> 写入空文件。</li><li>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code> 将其转换为字符串格式。</li><li>函数<code>write()</code> 不会在你写入的文本末尾添加换行符，因此如果你写入多行时没有指定换行符，则不会换行。</li><li>如果你要给文件添加内容，而不是覆盖原有的内容，可以附加模式打开文件。</li><li>调用open()时提供了两个实参。第一个实参也是要打开的文件的名称；第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件。<ul><li>打开文件时，可指定读取模式（’r’）、写入模式 （’w’）、附加模式 （’a’）或让你能够读取和写入文件的模式（’r+’）。如果你省略了模式实参，Python将以默认的只读模式打开文件。</li><li>如果你要写入的文件不存在，函数open()将自动创建它。然而，以写入（’w’）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</li><li>方法<code>write()</code> 将一个字符串写入文件</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、写入空文件</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.&quot;</span>)</span><br><span class="line"><span class="comment"># 2、写入多行</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating new games.\n&quot;</span>)</span><br><span class="line"><span class="comment"># 3、附加到文件</span></span><br><span class="line"><span class="comment"># 以附加模式打开文件时，Python不会在返回文件对象前清空文件，而你写入到文件的行都将添加到文件末尾。如果指定的文件不存在，Python将为你创建一个空文件。</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I also love finding meaning in large datasets.\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;I love creating apps that can run in a browser.\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、异常"><a href="#四、异常" class="headerlink" title="四、异常"></a>四、异常</h2><ol><li>异常是使用<code>try-except</code>代码块处理的。</li><li><code>try-except-else</code>代码块。</li><li><code>ZeroDivisionError</code>异常、<code>FileNotFoundError</code>异常。</li><li>用pass语句，在程序发生异常时保持静默。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、使用try-except代码块处理ZeroDivisionError异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br><span class="line"><span class="comment"># 说明：如果try代码块中的代码运行起来没有问题，Python将跳过except代码块；如果try代码块中的代码导致了错误，Python将查找这样的except代码块，并运行其中的代码。</span></span><br><span class="line"><span class="comment"># 2、else代码块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)  <span class="comment"># try代码块成功（try代码块中代码无异常）即执行else代码块。</span></span><br><span class="line"><span class="comment"># 3、处理FileNotFoundError异常</span></span><br><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">f&quot;Sorry, the file <span class="subst">&#123;filename&#125;</span> does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"><span class="comment"># 4、发生异常时保持静默</span></span><br><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">You can&#x27;t divide by zero!</span><br><span class="line"># 3.</span><br><span class="line">Sorry, the file alice.txt does not exist.</span><br></pre></td></tr></table></figure><h2 id="五、用模块json存储数据和重构"><a href="#五、用模块json存储数据和重构" class="headerlink" title="五、用模块json存储数据和重构"></a>五、用模块json存储数据和重构</h2><ol><li>模块json让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。你还可以使用json在Python程序之间分享数据。<ul><li>更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。</li><li>JSON（JavaScript Object Notation、JavaScript对象表示法）格式最初是为JavaScript开发的，但随后成了一种常见格式，被包括Python在内的众多语言采用。</li></ul></li><li>使用<code>json.dump()</code>和<code>json.load()</code>将数据存储，和将这些数据读取到内存中 dump：倾倒，转储，转存</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># json.dump()和json.load()</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span> <span class="comment"># 注意文件名一定要是字符串！！！</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(numbers, f) <span class="comment"># 函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。 注意第二个参数要是f而不是文件名！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    numbers = json.load(f)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="comment"># 以上是一种在程序之间共享数据的简单方式。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重构 将代码划分为一系列完成具体工作的函数的过程。重构让代码更清晰、更易于理解、更容易扩展。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#如果以前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则，就提示用户输入用户名并存储它</span></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">        username = json.load(f)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(username, f)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>将上述代码重构：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#（1）、将上面代码都放到一个名为greet_user()的函数中</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">            username = json.load(f)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(username, f)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">greet_user()</span><br><span class="line"><span class="comment"># 函数greet_user() 所做的不仅仅是问候用户，还在存储了用户名时获取它，而在没有存储用户名时提示用户输入一个。</span></span><br><span class="line"><span class="comment">#（2）、下面来重构greet_user() ，让它不执行这么多任务。</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">            username = json.load(f)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">        filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(username, f)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">greet_user()</span><br><span class="line"><span class="comment">#（3)、将greet_user()中的另一个代码块提取出来：将没有存储用户名时提示用户输入的代码放在一个独立的函数中：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">            username = json.load(f)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提示用户输入用户名&quot;&quot;&quot;</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(username, f)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><h1 id="第-11-章-测试代码"><a href="#第-11-章-测试代码" class="headerlink" title="第 11 章　测试代码"></a>第 11 章　测试代码</h1><h2 id="一、测试函数"><a href="#一、测试函数" class="headerlink" title="一、测试函数"></a>一、测试函数</h2><ol><li>Python标准库中的模块<code>unittest</code>提供了代码测试工具。<ul><li>单元测试 用于核实函数的某个方面没有问题。</li><li>测试用例 是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</li><li>全覆盖式测试 用例包含一整套单元测试，涵盖了各种可能的函数使用方式。对于大型项目，要实现全覆盖可能很难。</li><li>通常，最初只要针对代码的重要行为编写测试即可，等项目被广泛使用时再考虑全覆盖。</li></ul></li><li>编写测试用例，可先导入模块unittest以及要测试的函数，再创建一个继承<code>unittest.TestCase</code>的类，并编写一系列方法对函数行为的不同方面进行测试。</li><li>运行测试用例时，每完成一个单元测试，Python都打印一个字符：测试通过时打印一个句点；测试引发错误时打印一个E；测试导致断言失败时打印一个F。</li></ol><ul><li><strong>示例1</strong> 被测试的函数代码(name_function.py)如下：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name_function.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first, last</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate a neatly formatted full name.&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first&#125;</span> <span class="subst">&#123;last&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可通过的测试</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NamesTestCase</span>(unittest.TestCase): <span class="comment"># NamesTestCase这个类可以随便命名，这个类必须继承unittest.TestCase类，注意大写</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>) <span class="comment"># unittest类最有用的功能之一：一个★断言方法。</span></span><br><span class="line"><span class="comment"># 我们调用unittest的方法assertEqual()，并向它传递formatted_name和&#x27;Janis Joplin&#x27;。将formatted_name的值同字符串&#x27;Janis Joplin&#x27;进行比较</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li><p>__name__ &#x3D;&#x3D; ‘__main__‘ 就表示在当前文件中，可以在if __name__ &#x3D;&#x3D; ‘__main__‘:条件下写入测试代码，如此可以避免测试代码在模块被导入后执行。</p></li><li><p>Python 解释器执行代码时，有一些内建、隐含的变量，__name__就是其中之一，其意义是“模块名称”。</p></li><li><p>如果该模块是被引用，那么__name__的值会是此模块的名称；如果该模块是直接被执行，那么__name__的值是__main__。</p></li><li><p>简单来说就是，上面的代码如果被其他代码导入后，__name__ 就不等于 ‘__main__‘，if后面的就不执行。</p></li><li><p><strong>示例2</strong> 被测试的函数代码(name_function1.py)如下：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name_function1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first, middle, last</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate a neatly formatted full name.&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first&#125;</span> <span class="subst">&#123;middle&#125;</span> <span class="subst">&#123;last&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不能通过的测试</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function_1 <span class="keyword">import</span> get_formatted_name</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NamesTestCase</span>(unittest.TestCase): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li><strong>示例3</strong> 被测试的函数代码(name_function2.py)如下：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first, last, middle=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate a neatly formatted full name.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> middle:</span><br><span class="line">        full_name = <span class="string">f&quot;<span class="subst">&#123;first&#125;</span> <span class="subst">&#123;middle&#125;</span> <span class="subst">&#123;last&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = <span class="string">f&quot;<span class="subst">&#123;first&#125;</span> <span class="subst">&#123;last&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加新测试</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function_2 <span class="keyword">import</span> get_formatted_name</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NamesTestCase</span>(unittest.TestCase): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_middle_name</span>(<span class="params">self</span>): <span class="comment"># 添加第二个测试</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;能够正确地处理像Wolfgang Amadeus Mozart这样的姓名吗？&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(</span><br><span class="line">            <span class="string">&#x27;wolfgang&#x27;</span>, <span class="string">&#x27;mozart&#x27;</span>, <span class="string">&#x27;amadeus&#x27;</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Wolfgang Amadeus Mozart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="二、测试类"><a href="#二、测试类" class="headerlink" title="二、测试类"></a>二、测试类</h2><ol><li>Python在<code>unittest.TestCase</code>类中提供了很多断言方法。断言方法检查你认为应该满足的条件是否确实满足。</li><li>unittest Module中的断言方法：<ul><li><code>assertEqual(a, b)</code> 核实a &#x3D;&#x3D; b；<code>assertNotEqual(a, b)</code> 核实a !&#x3D; b</li><li><code>assertTrue(x)</code> 核实x为True；<code>assertFalse(x)</code> 核实x为False；</li><li><code>assertIn(item , list)</code> 核实item在list中；<code>assertNotIn(item , list)</code> 核实item不在list中。</li></ul></li><li>unittest.TestCase类包含方法<code>setUp()</code> 创建一系列实例并设置它们的属性，再在测试方法中直接使用这些实例。</li></ol><p>以下是被测试的survey.py的代码以及相关示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># survey.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnonymousSurvey</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;收集匿名调查问卷的答案&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, question</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储一个问题，并为存储答案做准备&quot;&quot;&quot;</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示调查问卷&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_response</span>(<span class="params">self, new_response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储单份调查答卷&quot;&quot;&quot;</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示收集到的所有答卷&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Survey results:&quot;</span>)      </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、测试AnonymousSurvey类</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAnonmyousSurvey</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_single_response</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试单个答案会被妥善地存储&quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">&#x27;English&#x27;</span>)</span><br><span class="line">        self.assertIn(<span class="string">&#x27;English&#x27;</span>, my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_three_responses</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试三个答案会被妥善地存储&quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        responses = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Spanish&#x27;</span>, <span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            self.assertIn(response, my_survey.responses)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"><span class="comment"># 2、在上面的代码中，我们在每个测试方法中都创建了一个AnonymousSurvey实例，并在每个方法中都创建了答案。</span></span><br><span class="line"><span class="comment"># unittest.TestCase类包含方法setUp()，让我们只需创建这些对象一次，并在每个测试方法中使用它们。</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAnonymousSurvey</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对AnonymousSurvey类的测试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):  <span class="comment"># 在setUp()方法中创建一系列实例并设置它们的属性，再在测试方法中直接使用这些实例。相比于在每个测试方法中都创建实例并设置其属性，这要容易得多。</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案，供使用的测试方法使用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = <span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Spanish&#x27;</span>, <span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_single_response</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试单个答案会被妥善地存储&quot;&quot;&quot;</span></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_three_responses</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;测试三个答案会被妥善地存储&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python入门.读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python编程从入门到实践》读书笔记（一）</title>
      <link href="/2022/09/09/Python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/09/Python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该笔记为 <strong>《Python编程从入门到实践》</strong> 的读书笔记，未经过系统的整理；<br>该笔记涉及的内容较为基础，可能含有大量废话；<br>该书的内容不涉及对Python底层逻辑的理解，不利于巩固基础，建议看完后看 <strong>《Learning Python》</strong><br>学习完成日期为2021年12月13日。</p></blockquote><p><img src="https://s2.loli.net/2022/09/09/F45BwnLIjXxVCtT.png" alt="Python编程从入门到实践"></p><h1 id="第-1-章-起步"><a href="#第-1-章-起步" class="headerlink" title="第 1 章　起步"></a>第 1 章　起步</h1><ol><li>命令窗口<ul><li>在命令窗口中，要在文件系统中导航，可使用终端命令cd(change directory,即切换目录)</li><li>使用命令dir（表示directory，即目录）可列出当前目录中的所有文件</li></ul></li><li>在终端会话中运行Python文件hello_world.py，请执行下面的命令：<ul><li>第一步  <code>C:\&gt; cd Desktop\python_work</code></li><li>第二步  <code>C:\Desktop\python_work&gt; dir</code> 找到hello_world.py</li><li>第三步  <code>C:\Desktop\python_work&gt; python hello_world.py</code> 得到输出<code>Hello Python world!</code></li></ul></li><li>其他注意事项<ul><li>区分语句、函数、方法</li><li>语句 比如if、while、del等</li><li>函数 比如print()等</li><li>方法 比如list.pop()等</li></ul></li></ol><h1 id="第-2-章-变量和简单数据类型"><a href="#第-2-章-变量和简单数据类型" class="headerlink" title="第 2 章　变量和简单数据类型"></a>第 2 章　变量和简单数据类型</h1><h2 id="一、变量名赋值的注意事项"><a href="#一、变量名赋值的注意事项" class="headerlink" title="一、变量名赋值的注意事项"></a>一、变量名赋值的注意事项</h2><ul><li>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为<code>message_1</code>，但不能将其命名为<code>1_message</code>。</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名<code>greeting_message</code>可行，但变量名<code>greeting message</code>会引发错误。</li><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print。</li><li>就目前而言，应使用小写的Python变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。</li><li>若变量为常量，最好将变量名全部大写：<code>MAX_CONNECTIONS= 5000</code> 。</li><li><strong>多个变量赋值：<code>x, y, z= &quot;a&quot;, 10, &quot;b&quot;</code></strong> 。</li></ul><h2 id="二、用方法修改字符串的大小写"><a href="#二、用方法修改字符串的大小写" class="headerlink" title="二、用方法修改字符串的大小写"></a>二、用方法修改字符串的大小写</h2><ul><li>首字母大写（其他都变小写）：<code>str.title()</code> 。</li><li>总结：全部大写：<code>str.upper()</code> 。</li><li>总结：全部小写：<code>str.lower()</code> 。</li><li>说明：方法 <code>title()</code> 出现在这个变量的后面。方法是Python可对数据执行的操作。在 <code>name.title()</code> 中，name 后面的句点（. ）让Python对变量name 执行方法 <code>title()</code> 指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数 <code>title()</code> 不需要额外的信息，因此它后面的括号是空的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name= <span class="string">&quot;aDA lovelace&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name.title()) <span class="comment"># 注：这三个方法不改变变量的值，与列表list的方法不同</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ada Lovelace</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><h2 id="三、在f字符串中使用变量"><a href="#三、在f字符串中使用变量" class="headerlink" title="三、在f字符串中使用变量"></a>三、在f字符串中使用变量</h2><ul><li><code>variate0 = f&quot;&#123;variate1&#125;&quot;</code> 这个方法主要用于在字符串中使用变量的值。</li><li>说明：这种字符串叫f字符串。f是format（设置格式）的缩写，把花括号内的变量替换为其值来设置字符串的格式。</li><li>f字符串是python3.6引入的。之前的方法是<code>format()</code>，比如：<code>full_name = &quot;&#123;&#125;&#123;&#125;&quot;.format(last_name, first_name)</code>，这2方法都可以用。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">last_name = <span class="built_in">input</span>(<span class="string">&quot;您的姓:&quot;</span>)</span><br><span class="line">first_name = <span class="built_in">input</span>(<span class="string">&quot;您的名:&quot;</span>)</span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;last_name&#125;</span><span class="subst">&#123;first_name&#125;</span>&quot;</span>  <span class="comment"># 或者是 full_name = &quot;&#123;&#125;&#123;&#125;&quot;.format(last_name, first_name)</span></span><br><span class="line"><span class="built_in">print</span>(full_name + <span class="string">&quot;您好！&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、使用制表符或换行符"><a href="#四、使用制表符或换行符" class="headerlink" title="四、使用制表符或换行符"></a>四、使用制表符或换行符</h2><ul><li><code>\t</code>：制表符，t:tablet；<code>\n</code>：换行符，n:newline。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Languages:\n\tPython\n\tC\n\tJavaScript&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Languages:</span><br><span class="line">        Python</span><br><span class="line">        C</span><br><span class="line">        JavaScript</span><br></pre></td></tr></table></figure><h2 id="五、用方法删除字符串中空白"><a href="#五、用方法删除字符串中空白" class="headerlink" title="五、用方法删除字符串中空白"></a>五、用方法删除字符串中空白</h2><ul><li>删除字符串末尾的空白：<code>str.rstrip() </code> 。</li><li>删除字符串开头的空白：<code>str.lstrip() </code> 。</li><li>删除字符串两边的空白：<code>str.strip()</code> 。</li><li>替换字符串中的特定字符：<code>str = str.replace(&#39;被替换字符&#39;, &#39;替换字符&#39;)</code> 。</li><li><code>str.rstrip([chars])</code> chars：指定删除的字符（默认为空白符，包括空格、换行符\n、回车符、制表符\t）。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random_string = <span class="string">&#x27;this is good    &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(random_string.rstrip()) <span class="comment"># 字符串末尾的空格会被删除</span></span><br><span class="line"><span class="built_in">print</span>(random_string.rstrip(<span class="string">&#x27;si oo&#x27;</span>)) <span class="comment"># &#x27;si oo&#x27; 不是尾随字符，因此不会删除任何内容</span></span><br><span class="line"><span class="built_in">print</span>(random_string.rstrip(<span class="string">&#x27;sid oo&#x27;</span>)) <span class="comment"># 在 &#x27;sid oo&#x27; 中 &#x27;d oo&#x27; 是尾随字符，&#x27;ood&#x27; 从字符串中删除</span></span><br><span class="line">website = <span class="string">&#x27;www.runoob.com/&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(website.rstrip(<span class="string">&#x27;m/.&#x27;</span>)) <span class="comment"># &#x27;m/&#x27; 是尾随字符，没有找到 &#x27;.&#x27; 号的尾随字符, &#x27;m/&#x27; 从字符串中删除</span></span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is good</span><br><span class="line">this is good</span><br><span class="line">this is g</span><br><span class="line">www.runoob.co</span><br></pre></td></tr></table></figure><h2 id="六、数与算术运算符"><a href="#六、数与算术运算符" class="headerlink" title="六、数与算术运算符"></a>六、数与算术运算符</h2><ul><li><code>%</code>：取模 - 返回除法的余数。</li><li><code>**</code>：幂 - 返回x的y次幂。</li><li><code>//</code>：取整除 - 返回商的整数部分（向下取整）。</li><li>相等运算符：<code>==</code>；不等运算符：<code>!=</code> 。</li><li><code>&lt;= </code> <code>&gt;=</code> 。</li><li>Python默认得到的总是浮点数，即使结果本为整数也是如此。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c= <span class="number">8</span>/<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.0</span><br></pre></td></tr></table></figure><ul><li>数中的下划线相当于平时书写的逗号，让数字更加清晰，Python不会打印其中的下划线（Python3.6以上版本）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d= <span class="number">14_000_000_000</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14000000000</span><br></pre></td></tr></table></figure><h1 id="第-3-章-列表简介"><a href="#第-3-章-列表简介" class="headerlink" title="第 3 章　列表简介"></a>第 3 章　列表简介</h1><h2 id="一、列表与列表索引"><a href="#一、列表与列表索引" class="headerlink" title="一、列表与列表索引"></a>一、列表与列表索引</h2><ul><li>列表是可以修改的。</li><li>列表（list）用方括号（[ ]）来表示，索引即在方括号内加0、1、2……或者-1、-2、-3…….</li><li>访问列表元素：将该元素的位置或索引告诉Python。</li><li>在Python中，第一个列表元素的索引为0，而不是1。在大多数编程语言中都是如此，这与列表操作的底层实现相关。</li><li>将索引指定为-1，-2，-3…..可返回最后的元素、倒数第二个列表元素、倒数第三个列表元素，以此类推。</li><li>可以用f字符串使用列表中的各个值。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">message = <span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trek</span><br><span class="line">specialized</span><br><span class="line">My first bicycle was a Trek</span><br></pre></td></tr></table></figure><h2 id="二、用方法修改添加列表元素"><a href="#二、用方法修改添加列表元素" class="headerlink" title="二、用方法修改添加列表元素"></a>二、用方法修改添加列表元素</h2><ol><li>修改元素 <code>list[index] = value</code></li><li>用方法在列表末尾添加元素 <code>list.append(value)</code> 注：该方法无返回值，但是会修改原来的列表。</li><li>用方法在列表中插入元素 <code>list.insert(index, value)</code> 注：该方法没有返回值，但会在列表指定位置插入对象。</li><li>使用del语句删除元素 <code>del list[index]</code> 。</li><li>使用方法pop() 弹出元素 <code>list.pop(index)</code>  注：pop是删除并且返回，默认为删除结尾的元素，pop为弹出的意思。</li><li>使用方法remove() 根据值删除元素 <code>list.remove(value)</code> 注：该方法无返回值，remove只删除第一个指定的值，需要使用循环来删除全部指定的值。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 用赋值修改list元素</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="comment"># 2. 方法append()</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)  <span class="comment"># 因为list.append()是一个none type, 返回值为None, 所以不需要赋值，它会直接修改list</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="comment"># 3. 方法insert()</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>) <span class="comment"># 同理，无返回值</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line"><span class="comment"># 4. 使用del语句删除元素</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="comment"># 5. 方法pop() 弹出元素</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">popped_motorcycle = motorcycles.pop() <span class="comment"># 弹出末尾元素，并返回该元素，若为pop(0)即弹出第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle)</span><br><span class="line"><span class="comment"># 6. 方法remove() </span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>) <span class="comment"># 同理，没有返回值但是会移除列表中的某个值的第一个匹配项</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. </span><br><span class="line">[&#x27;ducati&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line"># 2. </span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]</span><br><span class="line"># 3. </span><br><span class="line">[&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line"># 4.</span><br><span class="line">[&#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line"># 5.</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;]</span><br><span class="line">suzuki</span><br><span class="line"># 6.</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><h2 id="三、组织列表排序"><a href="#三、组织列表排序" class="headerlink" title="三、组织列表排序"></a>三、组织列表排序</h2><ol><li>使用方法sort() 对列表按字母顺序或反序排序 <code>list.sort()</code> 或 <code>list.sort(reverse=True)</code> 注：方法永久修改列表，该方法没有返回值。</li><li>使用函数sorted() 对列表进行临时按字母顺序或反序排序 <code>sorted(list)</code> 或 <code>sorted(list, reverse=True)</code> 注：函数不修改列表。</li><li>使用方法reverse() 反转列表元素的排列顺序 <code>list.reverse()</code> 注：方法永久修改列表，该方法没有返回值。</li><li>使用函数len() 确定列表的长度 <code>len(list)</code> 。</li><li>其他注意事项：上述说的都是小写情况，有大写字母可能会复杂。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、方法sort()</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="comment"># 2、函数sorted()</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars, reverse=<span class="literal">True</span>)) <span class="comment"># 也可以用reverse=True来按字母反序打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>) <span class="comment"># 不改变列表原始顺序</span></span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="comment"># 3、方法reverse()</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"><span class="comment"># 4、函数len()</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cars))</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span><br><span class="line">[&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span><br><span class="line"># 2.</span><br><span class="line">Here is the original list:</span><br><span class="line">[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]</span><br><span class="line"></span><br><span class="line">Here is the sorted list:</span><br><span class="line">[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span><br><span class="line">[&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span><br><span class="line"></span><br><span class="line">Here is the original list again:</span><br><span class="line">[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]</span><br><span class="line"># 3.</span><br><span class="line">[&#x27;subaru&#x27;, &#x27;toyota&#x27;, &#x27;audi&#x27;, &#x27;bmw&#x27;]</span><br><span class="line"># 4.</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h1 id="第-4-章-操作列表"><a href="#第-4-章-操作列表" class="headerlink" title="第 4 章　操作列表"></a>第 4 章　操作列表</h1><h2 id="一、for循环语句"><a href="#一、for循环语句" class="headerlink" title="一、for循环语句"></a>一、for循环语句</h2><ul><li>for循环语句，对列表中的每个元素都执行相同的操作 <code>for variate in list:</code> 。</li><li>注意点：别忘了冒号；进入循环的语句别忘了缩进。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:  <span class="comment"># 这行代码让Python从列表magicians中取出一个名字，并将其存储在变量magician中，即赋值</span></span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><h2 id="二、创建数值列表"><a href="#二、创建数值列表" class="headerlink" title="二、创建数值列表"></a>二、创建数值列表</h2><ol><li>使用函数range()生成一系列数字 <code>range(start,end,step)</code> 注：包括start，不包括end。</li><li>使用函数list()，range()创建数字列表 <code>list(range(start,end,step))</code> 。</li><li>使用函数min() max() sum()对数字列表进行简单统计 <code>min(list) max(list) sum(list)</code> 。</li><li>列表解析将for循环和创建新元素的代码合成一行 <code>list = [value**x for value in range(start,end,step)]</code> 。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、使用函数range()</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):  <span class="comment"># 注意，打印出来的是1-4，不打印5</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment"># 2、使用range()创建数字列表</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br><span class="line"><span class="comment"># 3、使用函数min() max() sum()</span></span><br><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(digits))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(digits))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(digits))</span><br><span class="line"><span class="comment"># 4、列表解析</span></span><br><span class="line">  <span class="comment">#(1) 麻烦的方法：</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line">  <span class="comment">#(2) 列表解析合并代码：</span></span><br><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"># 2.</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[2, 4, 6, 8, 10]</span><br><span class="line"># 3.</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">45</span><br><span class="line"># 4.</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><h2 id="三、使用列表的一部分"><a href="#三、使用列表的一部分" class="headerlink" title="三、使用列表的一部分"></a>三、使用列表的一部分</h2><ol><li>切片 返回列表部分元素 <code>list[start:end:step]</code> 注：包括start，不包括end，step同之前，每隔多少元素提取一个。</li><li>用赋值复制列表的一部分 <code>list1 = list0[:]</code> 注：不能直接list1 &#x3D; list0，这样赋值会导致这2个变量指向同一列表。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、切片</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 包括1，不包括4</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>]) <span class="comment"># 如果没有指定第一个索引，将自动从列表开头开始</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment"># 提取从第3个元素到列表末尾的所有元素</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) <span class="comment"># 同上：输出名单上的最后三名队员</span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(player)</span><br><span class="line"><span class="comment"># 2、赋值复制列表</span></span><br><span class="line">  <span class="comment"># (1)list1 = list0[:]</span></span><br><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods = my_foods[:] <span class="comment"># 别忘了后面的[:]!!!</span></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br><span class="line">  <span class="comment"># (2)list1 = list0 导致逻辑错误</span></span><br><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods = my_foods <span class="comment"># ★这行不通，这种语法实际上是让Python将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表。</span></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. </span><br><span class="line">[&#x27;martina&#x27;, &#x27;michael&#x27;, &#x27;florence&#x27;]</span><br><span class="line">[&#x27;charles&#x27;, &#x27;martina&#x27;, &#x27;michael&#x27;, &#x27;florence&#x27;]</span><br><span class="line">[&#x27;michael&#x27;, &#x27;florence&#x27;, &#x27;eli&#x27;]</span><br><span class="line">[&#x27;michael&#x27;, &#x27;florence&#x27;, &#x27;eli&#x27;]</span><br><span class="line">charles</span><br><span class="line">martina</span><br><span class="line">michael</span><br><span class="line"># 2.</span><br><span class="line">My favorite foods are:</span><br><span class="line">[&#x27;pizza&#x27;, &#x27;falafel&#x27;, &#x27;carrot cake&#x27;, &#x27;cannoli&#x27;]</span><br><span class="line"></span><br><span class="line">My friend&#x27;s favorite foods are:</span><br><span class="line">[&#x27;pizza&#x27;, &#x27;falafel&#x27;, &#x27;carrot cake&#x27;, &#x27;ice cream&#x27;]</span><br><span class="line">My favorite foods are:</span><br><span class="line">[&#x27;pizza&#x27;, &#x27;falafel&#x27;, &#x27;carrot cake&#x27;, &#x27;cannoli&#x27;, &#x27;ice cream&#x27;]</span><br><span class="line"></span><br><span class="line">My friend&#x27;s favorite foods are:</span><br><span class="line">[&#x27;pizza&#x27;, &#x27;falafel&#x27;, &#x27;carrot cake&#x27;, &#x27;cannoli&#x27;, &#x27;ice cream&#x27;]</span><br></pre></td></tr></table></figure><h2 id="四、元组"><a href="#四、元组" class="headerlink" title="四、元组"></a>四、元组</h2><ol><li>元组tuple即 不可变的列表 <code>tuple = (element0, element1, ...)</code> 。</li><li>使用索引访问元组元素 <code>tuple[number]</code> 注：也是中括号。</li><li>★元组中的元素不可修改、赋值。</li><li>用for循环语句，对元组中的每个元素都执行相同的操作 <code>for variate in tuple:</code> 。</li><li>元组的元素不能修改，但是可以用赋值修改整个元组变量。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、使用索引访问元组元素</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment"># 注意也是中括号</span></span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>]) </span><br><span class="line"><span class="comment"># 2、给元组的元素赋值，会导致python返回类型错误消息</span></span><br><span class="line"><span class="comment"># 比如dimensions[0] = 250会导致错误</span></span><br><span class="line"><span class="comment"># 3、for循环语句</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line"><span class="comment"># 4、用赋值修改整个元组</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"># 3.</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"># 4.</span><br><span class="line">Original dimensions:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"></span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="五、代码格式PEP-8"><a href="#五、代码格式PEP-8" class="headerlink" title="五、代码格式PEP 8"></a>五、代码格式PEP 8</h2><ul><li>Python程序员都遵循一些格式设置约定。</li><li>若要提出Python语言修改建议，需要编写Python改进提案（Python Enhancement Proposal，PEP）.PEP 8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。</li><li><ol><li>缩进：PEP 8建议每级缩进都使用四个空格；在字处理文档中，大家常常使用制表符而不是空格来缩进。在程序中混合使用制表符和空格可能导致极难解决的问题。</li><li>行长：每行都不要超过80字符。对你使用的编辑器进行设置，使其在第80个字符处显示一条垂直参考线。</li><li>空行：不要在程序文件中滥用空行。</li></ol></li></ul><h1 id="第-5-章-if-语句"><a href="#第-5-章-if-语句" class="headerlink" title="第 5 章　if 语句"></a>第 5 章　if 语句</h1><h2 id="一、if语句条件测试以及布尔表达式"><a href="#一、if语句条件测试以及布尔表达式" class="headerlink" title="一、if语句条件测试以及布尔表达式"></a>一、if语句条件测试以及布尔表达式</h2><ol><li>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。</li><li>相等运算符：<code>==</code> ；不等运算符：<code>!=</code>  注：两个大小写不同的值会被视为不相等</li><li><code>and</code> ：两个条件都为True，则为True；有一个条件是False，则为False。 注：从左到右计算表达式，若第一个条件为False，直接返回False，不计算第二个条件</li><li><code>or</code> ：有一个条件是True，则为True；两个条件都为False，则为False。 注：从左到右计算表达式，若第一个条件为True，直接返回True，不计算第二个条件</li><li>要判断特定的值是否已包含在列表中，可使用关键字in；确定特定的值未包含在列表，可使用关键字<code>not in</code></li><li>注意：<code>False</code>和<code>True</code>的首字母必须大写，否则不是布尔表达式(bool)</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、相等运算符、不等运算符</span></span><br><span class="line">car = <span class="string">&#x27;Audi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(car == <span class="string">&#x27;audi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(car.lower() == <span class="string">&#x27;audi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(car != <span class="string">&#x27;audi&#x27;</span>)</span><br><span class="line"><span class="comment"># 2、and和or</span></span><br><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_1 = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(age_0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span>)</span><br><span class="line"><span class="comment"># 3、关键字in、not in</span></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings)</span><br><span class="line">banned_users = [<span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>, <span class="string">&#x27;david&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;marie&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> banned_users)</span><br><span class="line"><span class="comment"># 4、布尔表达式bool</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line"># 2.</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line"># 3.</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line"># 4.</span><br><span class="line">&lt;class &#x27;bool&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="二、if语句"><a href="#二、if语句" class="headerlink" title="二、if语句"></a>二、if语句</h2><ol><li>简单的if语句：<code>if conditional_test:</code> 。</li><li>if-else语句：<code>else</code>语句让你能够指定条件测试未通过时要执行的操作。</li><li>if-elif-else语句：依次检查每个条件测试，若测试通过，Python将执行紧跟在它后面的代码，并跳过余下的测试。</li><li>if-elif-else语句中可以不用else。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、简单的if语句</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)  <span class="comment"># 在if语句中，缩进的作用与for循环中相同。如果测试通过了，将执行if语句后面所有缩进的代码行，否则将忽略它们。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="comment"># 2、if-else语句</span></span><br><span class="line">age = <span class="number">17</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry, you are too young to vote.&quot;</span>) <span class="comment"># 注：else本身不缩进！后面的执行语句别忘了冒号和缩进！</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 18!&quot;</span>)</span><br><span class="line"><span class="comment"># 3、if-elif-else语句</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $0.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $5.&quot;</span>) <span class="comment"># 注：elif本身不缩进，并且别忘了冒号和之后的执行语句的缩进</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $10.&quot;</span>)</span><br><span class="line"><span class="comment"># 4、Python并不要求if-elif结构后面必须有else代码块。else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行。</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: <span class="comment"># 注意：不要写成4 &lt;= age &lt; 18，这样写虽然不会错，但是没必要</span></span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Your admission cost is $<span class="subst">&#123;price&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">You are old enough to vote!</span><br><span class="line">Have you registered to vote yet?</span><br><span class="line"># 2.</span><br><span class="line">Sorry, you are too young to vote.</span><br><span class="line">Please register to vote as soon as you turn 18!</span><br><span class="line"># 3.</span><br><span class="line">Your admission cost is $5.</span><br><span class="line"># 4.</span><br><span class="line">Your admission cost is $5.</span><br></pre></td></tr></table></figure><h2 id="三、if语句处理列表"><a href="#三、if语句处理列表" class="headerlink" title="三、if语句处理列表"></a>三、if语句处理列表</h2><ul><li>在if语句中将列表名用在条件表达式中时，Python将在列表至少包含一个元素时返回True，并在列表为空时返回False。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、确定列表不是空的</span></span><br><span class="line">requested_toppings = []</span><br><span class="line"><span class="keyword">if</span> requested_toppings:  <span class="comment"># 因为列表为空，返回了False，执行了else语句</span></span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>)</span><br><span class="line"><span class="comment"># 2、使用多个列表</span></span><br><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;olives&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;pepperoni&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;french fries&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Adding <span class="subst">&#123;requested_topping&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Sorry, we don&#x27;t have <span class="subst">&#123;requested_topping&#125;</span>.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Are you sure you want a plain pizza?</span><br><span class="line"># 2.</span><br><span class="line">Adding mushrooms.</span><br><span class="line">Sorry, we don&#x27;t have french fries.</span><br><span class="line">Adding extra cheese.</span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure><h1 id="第-6-章-字典"><a href="#第-6-章-字典" class="headerlink" title="第 6 章　字典"></a>第 6 章　字典</h1><h2 id="一、使用字典"><a href="#一、使用字典" class="headerlink" title="一、使用字典"></a>一、使用字典</h2><ol><li>字典dict类似于列表，但让你能够将不同的信息关联起来 <code>dict = &#123;key1 : value1, key2 : value2, key3 : value3&#125;</code> 。</li><li>字典是另一种可变容器模型，且可存储任意类型对象。字典是一系列键值对，每个键都有一个值相关联，使用键来访问与之关联的值。</li><li>用赋值添加键值对 <code>dict[key4] = value4</code> 。</li><li>用赋值修改字典中的值 <code>dict[key1] = value4</code> 。</li><li>使用del语句将相应的键值对彻底删除 <code>del dict[key1]</code> 。</li><li>使用方法get()在指定的键不存在时返回一个默认值 <code>dict.get(key0, value0)</code> 若不指定value0，则将返回None。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、简单的字典</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) <span class="comment"># 调用是用键值key并且同列表也是中括号，可以把列表理解为key是0，1，2的字典。</span></span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"><span class="comment"># 2、用赋值添加键值对</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0) <span class="comment"># 在python3.7版本后，字典元素的顺序与定义时一致</span></span><br><span class="line"><span class="comment"># 3、用赋值修改字典中的值</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"><span class="comment"># 4、del语句删除键值对</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"><span class="comment"># 5、多行定义字典</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">print</span>(favorite_languages)</span><br><span class="line"><span class="comment"># 6、使用方法get()处理键不存在的错误</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">point_value = alien_0.get(<span class="string">&#x27;point&#x27;</span>, <span class="string">&#x27;No point value assigned&#x27;</span>) <span class="comment"># 如果字典有键point，返回相关联的值；若没有，返回指定的默认值。</span></span><br><span class="line"><span class="built_in">print</span>(point_value)</span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;point&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">point_value = alien_0.get(<span class="string">&#x27;point&#x27;</span>, <span class="string">&#x27;No point value assigned&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(point_value)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">green</span><br><span class="line">5</span><br><span class="line"># 2.</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5, &#x27;x_position&#x27;: 0, &#x27;y_position&#x27;: 25&#125;</span><br><span class="line"># 3.</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;&#125;</span><br><span class="line"># 4.</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;&#125;</span><br><span class="line"># 5.</span><br><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarah&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line"># 6.</span><br><span class="line">No point value assigned</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="二、遍历字典"><a href="#二、遍历字典" class="headerlink" title="二、遍历字典"></a>二、遍历字典</h2><ol><li>用for循环和方法items()来遍历字典 <code>for key, value in dict.items():</code></li><li>方法<code>items()</code>返回一个键值对列表  说明：可以print试试 注：别忘了s。</li><li>方法<code>keys()</code>遍历字典中的所有键，返回一个列表，其中包含字典中的所有键 说明：可以print试试 注：别忘了s。</li><li>用函数<code>sorted()</code>按顺序遍历字典中的所有键 sort：排序、分类的意思。</li><li>用方法<code>values()</code>遍历字典中的所有值，它返回一个值列表 注：别忘了s。</li><li>用<code>set()</code>函数删除重复数据 set集合，集合里不包括重复项。</li><li>可以用大括号创建集合 比如 <code>set = &#123;&#39;python&#39;, &#39;ruby&#39;, &#39;python&#39;, &#39;c&#39;&#125;</code> 这样打印出来只有3个元素，注意：和字典都是用大括号。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、for循环和方法items()</span></span><br><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,&#125;</span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():   <span class="comment"># 别忘了这个items</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name.title()&#125;</span>&#x27;s favorite language is <span class="subst">&#123;language.title()&#125;</span>.&quot;</span>)</span><br><span class="line"><span class="comment"># 2、方法keys()</span></span><br><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages:  <span class="comment">#遍历字典时，会默认遍历所有的键，不用keys()输出将不变，但有keys()更好理解，所以可以不忽略或省略</span></span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br><span class="line"></span><br><span class="line">friends = [<span class="string">&#x27;phil&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>]  <span class="comment">#注：这个是列表</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> friends:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hi <span class="subst">&#123;name.title()&#125;</span>, I see your favorite language is <span class="subst">&#123;favorite_languages[name].title()&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># 3、函数sorted()</span></span><br><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name.title()&#125;</span>, thank you for taking the poll.&quot;</span>)</span><br><span class="line"><span class="comment"># 4、方法values()</span></span><br><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br><span class="line"><span class="comment"># 5、set()函数</span></span><br><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Jen&#x27;s favorite language is Python.</span><br><span class="line">Sarah&#x27;s favorite language is C.</span><br><span class="line">Edward&#x27;s favorite language is Ruby.</span><br><span class="line">Phil&#x27;s favorite language is Python.</span><br><span class="line"># 2.</span><br><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Hi Sarah, I see your favorite language is C!</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br><span class="line">Hi Phil, I see your favorite language is Python!</span><br><span class="line"># 3.</span><br><span class="line">Edward, thank you for taking the poll.</span><br><span class="line">Jen, thank you for taking the poll.</span><br><span class="line">Phil, thank you for taking the poll.</span><br><span class="line">Sarah, thank you for taking the poll.</span><br><span class="line"># 4.</span><br><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Python</span><br><span class="line"># 5.</span><br><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br></pre></td></tr></table></figure><h2 id="三、嵌套字典列表"><a href="#三、嵌套字典列表" class="headerlink" title="三、嵌套字典列表"></a>三、嵌套字典列表</h2><ul><li>将一系列字典存储在列表中，或将列表作为值存储在字典。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、嵌套：字典列表 创造一个30个外星人的字典的列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):  <span class="comment"># ★就是遍历30次，range()函数见创建数值列表，它返回一系列数字，其唯一的用途是告诉Python我们要重复这个循环多少次</span></span><br><span class="line">    new_alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Total number of aliens: <span class="subst">&#123;<span class="built_in">len</span>(aliens)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 2、嵌套：在字典中存储列表</span></span><br><span class="line"><span class="comment"># (1)、</span></span><br><span class="line">pizza = &#123;</span><br><span class="line">    <span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>],  <span class="comment"># 在字典中将一个键关联到多个值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;You ordered a <span class="subst">&#123;pizza[<span class="string">&#x27;crust&#x27;</span>]&#125;</span>-crust pizza with the following toppings:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br><span class="line"><span class="comment"># (2)、</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;name.title()&#125;</span>&#x27;s favorite languages are:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\t<span class="subst">&#123;language.title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 3、嵌套：在字典中存储字典</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,   <span class="comment"># 注意规范格式</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;user_info[<span class="string">&#x27;first&#x27;</span>]&#125;</span> <span class="subst">&#123;user_info[<span class="string">&#x27;last&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\tFull name: <span class="subst">&#123;full_name.title()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\tLocation: <span class="subst">&#123;location.title()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Total number of aliens: 30</span><br><span class="line"># 2.(1).</span><br><span class="line">You ordered a thick-crust pizza with the following toppings:</span><br><span class="line">        mushrooms</span><br><span class="line">        extra cheese</span><br><span class="line"># 2.(2).</span><br><span class="line">Jen&#x27;s favorite languages are:</span><br><span class="line">        Python</span><br><span class="line">        Ruby</span><br><span class="line"></span><br><span class="line">Sarah&#x27;s favorite languages are:</span><br><span class="line">        C</span><br><span class="line"></span><br><span class="line">Edward&#x27;s favorite languages are:</span><br><span class="line">        Ruby</span><br><span class="line">        Go</span><br><span class="line"></span><br><span class="line">Phil&#x27;s favorite languages are:</span><br><span class="line">        Python</span><br><span class="line">        Haskell</span><br><span class="line"># 3.</span><br><span class="line">Username: aeinstein</span><br><span class="line">        Full name: Albert Einstein</span><br><span class="line">        Location: Princeton</span><br><span class="line"></span><br><span class="line">Username: mcurie</span><br><span class="line">        Full name: Marie Curie</span><br><span class="line">        Location: Paris</span><br></pre></td></tr></table></figure><h1 id="第-7-章-用户输入和while循环"><a href="#第-7-章-用户输入和while循环" class="headerlink" title="第 7 章　用户输入和while循环"></a>第 7 章　用户输入和while循环</h1><h2 id="一、用户输入"><a href="#一、用户输入" class="headerlink" title="一、用户输入"></a>一、用户输入</h2><ol><li>函数input()，等待用户输入一些文本，获取用户输入后，Python将其存储在一个变量中</li><li>用函数int()来将用户输入解读为字符串</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、函数input()</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;Please enter your name: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment">#★有时候提示可能超过一行，可将提示存储在一个变量中，再将该变量传递给函数input()</span></span><br><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># 2、函数int()</span></span><br><span class="line">height = <span class="built_in">input</span>(<span class="string">&quot;How tall are you, in inches? &quot;</span>)</span><br><span class="line">height = <span class="built_in">int</span>(height)</span><br><span class="line"><span class="keyword">if</span> height &gt;= <span class="number">48</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;re tall enough to ride!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;ll be able to ride when you&#x27;re a little older.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="二、while循环"><a href="#二、while循环" class="headerlink" title="二、while循环"></a>二、while循环</h2><ol><li>while循环语句不断地运行，直到指定的条件不满足为止。 注意：用<kbd>Ctrl</kbd>+<kbd>C</kbd>来中止无线循环。</li><li>使用一个变量，用于判断整个程序是否处于活动状态，这个变量被称为标志flag，让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。</li><li>用<code>break</code>语句立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何</li><li>用<code>continue</code>语句忽略余下的代码返回到循环开头，并根据条件测试结果决定是否继续执行循环</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、简单while循环</span></span><br><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>: </span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line"><span class="comment"># 2、让用户选择何时退出</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span>  <span class="comment"># 这样一定要先message = &quot;&quot;，不能直接message = input(prompt)，否则input函数在循环之外了，而且还会导致无限循环</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;quit&#x27;</span>:  <span class="comment"># 这里多添加个if的原因是，若不添加，我打个quit上去，会打印出quit，为了不打印出来加这个if语句</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 3、标志flag</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:  <span class="comment"># 注：变量active为True ，循环就将继续运行</span></span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 4、break语句</span></span><br><span class="line">prompt = <span class="string">&quot;\nPlease enter the name of a city you have visited:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.) &quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    city = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> city == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;I&#x27;d love to go to <span class="subst">&#123;city.title()&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># 5、continue语句</span></span><br><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"># 5.</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="三、while循环处理列表字典"><a href="#三、while循环处理列表字典" class="headerlink" title="三、while循环处理列表字典"></a>三、while循环处理列表字典</h2><ul><li>同if语句，在while语句中将列表名用在条件表达式中时，Python将在列表至少包含一个元素时返回True，并在列表为空时返回False。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、在列表之间移动元素</span></span><br><span class="line">unconfirmed_users = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()  <span class="comment"># pop：弹出返回末尾元素</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    <span class="built_in">print</span>(confirmed_user.title())</span><br><span class="line"><span class="comment"># 2、用方法remove删除列表中所有同一元素，因为remove只移除列表中的某个值的第一个匹配项</span></span><br><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pets)</span><br><span class="line"><span class="comment"># 3、使用用户输入来填充字典</span></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">    responses[name] = response <span class="comment"># 赋值增加键值对</span></span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        polling_active = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> would like to climb <span class="subst">&#123;response&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.</span><br><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line"></span><br><span class="line">The following users have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br><span class="line"># 2.</span><br><span class="line">[&#x27;dog&#x27;, &#x27;dog&#x27;, &#x27;goldfish&#x27;, &#x27;rabbit&#x27;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python入门.读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="/2022/09/07/markdown/"/>
      <url>/2022/09/07/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode-编辑器"><a href="#VSCode-编辑器" class="headerlink" title="VSCode 编辑器"></a>VSCode 编辑器</h1><p>1、VSCode 默认集成了 Markdown 文档编辑插件，原生就支持高亮 Markdown 的语法。<br>2、VSCode 实时预览需要执行 Markdown: Open Preview to the Side 命令来实现。   </p><h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p>显示效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="Markdown-格式"><a href="#Markdown-格式" class="headerlink" title="Markdown 格式"></a>Markdown 格式</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure><p>显示效果如下：<br><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>1、Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格；<br>2、或者在段落后面使用一个空行来表示重新开始一个段落。</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下：  </p><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ ：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~带删除线文本~~</span><br></pre></td></tr></table></figure><p>显示效果如下：<br><del>带删除线文本</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 &lt;u&gt; 标签来实现：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>带下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下：<br><u>带下划线文本</u>  </p><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下： </p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表使用数字并加上 . 号来表示：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下： </p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示效果如下： </p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><h2 id="区块和区块嵌套"><a href="#区块和区块嵌套" class="headerlink" title="区块和区块嵌套"></a>区块和区块嵌套</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块内容</span></span><br><span class="line"></span><br><span class="line">// 区块嵌套</span><br><span class="line"><span class="quote">&gt; 第一层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第二层</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第三层</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示效果如下： </p><blockquote><p>区块内容</p></blockquote><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>区块中使用列表：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br></pre></td></tr></table></figure><p>显示效果如下： </p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，最好在 &gt; 前添加四个空格的缩进：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; 区块内容</span></span><br><span class="line"><span class="code">* 第二项</span></span><br><span class="line"><span class="code">&gt; 区块内容</span></span><br></pre></td></tr></table></figure><p>显示效果如下： </p><ul><li>第一项<blockquote><p>区块内容</p></blockquote></li><li>第二项<blockquote><p>区块内容</p></blockquote></li></ul><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><h2 id="一个函数或片段的代码"><a href="#一个函数或片段的代码" class="headerlink" title="一个函数或片段的代码"></a>一个函数或片段的代码</h2><p>用反引号把它包起来（&#96;）：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`printf()`</span> 函数</span><br></pre></td></tr></table></figure><p>显示效果如下：<br><code>printf()</code> 函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``` python</span></span><br><span class="line"><span class="code">s = &quot;Python hello world！&quot;</span></span><br><span class="line"><span class="code">print(s)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>显示效果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Python hello world！&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;http://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下：<br><a href="http://www.baidu.com/">百度</a></p><p>或者</p><p><a href="http://www.baidu.com/">http://www.baidu.com</a></p><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片名称</span>](<span class="link">https://s2.loli.net/2022/09/09/y8KgN7EbOkPIucL.jpg</span>)</span><br><span class="line">![<span class="string">图片名称</span>](<span class="link">https://s2.loli.net/2022/09/09/y8KgN7EbOkPIucL.jpg &quot;可选标题&quot;</span>)</span><br><span class="line">//可选标题需要鼠标悬浮在图片上，即显示</span><br></pre></td></tr></table></figure><p>带可选标题显示效果如下：<br><img src="https://s2.loli.net/2022/09/09/y8KgN7EbOkPIucL.jpg" alt="图片名称" title="可选标题"><br>不带可选标题显示效果如下：<br><img src="https://s2.loli.net/2022/09/09/y8KgN7EbOkPIucL.jpg" alt="图片名称"></p><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行，还可以通过 : 设置表格的对齐方式：  </p><ul><li>-: 冒号在右边设置内容和标题栏居右对齐</li><li>:- 冒号在左边设置内容和标题栏居左对齐</li><li>:-:冒号在两边设置内容和标题栏居中对齐</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：  </p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用 <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p>显示效果如下：<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
